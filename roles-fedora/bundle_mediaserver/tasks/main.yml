---
- name: install plex repo
  yum_repository:
    name: plex
    description: "Repo for Plex Media Server"
    file: plex
    baseurl: https://downloads.plex.tv/repo/rpm/$basearch/
    gpgkey: https://downloads.plex.tv/plex-keys/PlexSign.key
    gpgcheck: yes
    enabled: yes
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: install rpmfusion & multimedia repo
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-29.noarch.rpm
    - http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-29.noarch.rpm
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: install packages
  package:
    name: ['fuse', 'plexmediaserver', 'gettext', 'mono-devel', 'mediainfo', 'libmediainfo', 'sqlite', 'libzen', 'HandBrake', 'java-1.8.0-openjdk', 'libdrm', 'ffmpeg', 'caddy', 'https://downloads.rclone.org/rclone-current-linux-amd64.rpm']
    state: present
  register: fuse_install
  when: bundle_mediaserver.enabled|default(false)|bool == true

- name: create folders
  file:
    path: "{{ item.folder }}"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/plex"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/plex/backup"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/plex/Plex\ Media\ Server"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/rclone"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/tautulli"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/home/{{ bundle_mediaserver.config.user }}/.config/NzbDrone"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0750"
  - folder: "/mnt/{{ bundle_mediaserver.config.mountfolder }}"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0755"
  - folder: "/mnt/{{ bundle_mediaserver.config.mountfolder }}/{{ bundle_mediaserver.config.rclone_cryptfolder }}"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0755"
  - folder: "/etc/systemd/system/plexmediaserver.service.d"
    user: root
    group: root
    mode: "0755"
  - folder: "/opt/tautulli"
    user: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0755"
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: "check for installed sonarr"
  stat:
    path: "/opt/NzbDrone/NzbDrone.exe"
  register: sonarr_bin
  when: bundle_mediaserver.enabled|default(false)|bool == true

- name: "download sonarr"
  get_url:
    url: "http://download.sonarr.tv/v2/master/mono/NzbDrone.master.tar.gz"
    dest: "/tmp/NzbDrone.master.tar.gz"
  when: bundle_mediaserver.enabled|default(false)|bool == true and not sonarr_bin.stat.exists

- name: "extract sonarr"
  unarchive:
    copy: "no"
    src: "/tmp/NzbDrone.master.tar.gz"
    dest: "/opt/"
  when: bundle_mediaserver.enabled|default(false)|bool == true and not sonarr_bin.stat.exists

- name: change ownership of /opt/NzbDrone
  command: "chown -R {{ bundle_mediaserver.config.user }}:{{ bundle_mediaserver.config.group }} /opt/NzbDrone"
  when: bundle_mediaserver.enabled|default(false)|bool == true

- name: clone https://github.com/Tautulli/Tautulli.git
  git:
    repo: 'https://github.com/Tautulli/Tautulli.git'
    dest: /opt/tautulli
    update: no
  become: true
  become_user: "{{ bundle_mediaserver.config.user }}"

- name: configure /etc/fuse.conf
  replace:
    path: /etc/fuse.conf
    regexp: '{{ item.key }}'
    replace: '{{ item.value }}'
  with_items:
  - key: '# mount_max = 1000'
    value: 'mount_max = 1000'
  - key: '# user_allow_other'
    value: 'user_allow_other'
  when:
  - fuse_install is success
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: copy configs and systemd units
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    force: "{{ item.force }}"
  with_items:
  - src: conf_rclone.j2
    dest: "/home/{{ bundle_mediaserver.config.user }}/.config/rclone/rclone.conf"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0640"
    force: no
  - src: conf_plex.j2
    dest: "/home/{{ bundle_mediaserver.config.user }}/.config/plex/Plex\ Media\ Server/Preferences.xml"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0640"
    force: no
  - src: conf_sonarr.j2
    dest: "/home/{{ bundle_mediaserver.config.user }}/.config/NzbDrone/config.xml"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
    mode: "0640"
    force: yes
  - src: conf_caddy.j2
    dest: "/etc/caddy/caddy.conf"
    owner: root
    group: root
    mode: "0644"
    force: yes
  - src: service_plexcrypt.j2
    dest: "/etc/systemd/system/plexcrypt.service"
    owner: root
    group: root
    mode: "0644"
    force: yes
  - src: service_plexcrypthttp.j2
    dest: "/etc/systemd/system/plexcrypthttp.service"
    owner: root
    group: root
    mode: "0644"
    force: yes
  - src: service_tautulli.j2
    dest: "/etc/systemd/system/tautulli.service"
    owner: root
    group: root
    mode: "0644"
    force: yes
  - src: service_plex_override.j2
    dest: "/etc/systemd/system/plexmediaserver.service.d/override.conf"
    owner: root
    group: root
    mode: "0644"
    force: yes
  - src: service_sonarr.j2
    dest: "/etc/systemd/system/sonarr.service"
    owner: root
    group: root
    mode: "0644"
    force: yes
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true
  notify:
  - reload systemd

- name: configure system settings, file descriptors and number of threads
  pam_limits:
    domain: caddy
    limit_type: "{{item.limit_type}}"
    limit_item: "{{item.limit_item}}"
    value: "{{item.value}}"
  with_items:
  - { limit_type: '-', limit_item: 'nofile', value: 8192 }
  - { limit_type: '-', limit_item: 'nproc', value: 8192 }
  - { limit_type: 'soft', limit_item: 'memlock', value: unlimited }
  - { limit_type: 'hard', limit_item: 'memlock', value: unlimited }

- name: reload settings from all system configuration files
  shell: sysctl --system

- name: copy plexmediaserver ufw rule
  copy:
    src: "{{ role_path }}/files/plexmediaserver.ufw"
    dest: /etc/ufw/applications.d/plexmediaserver
    owner: root
    group: root
    mode: 0644
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: copy local file
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0774
  with_items:
  - src: "{{ role_path }}/files/mediabackup.sh"
    dest: "/usr/local/bin/mediabackup.sh"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
  - src: "{{ role_path }}/files/bash_media"
    dest: "/home/{{ bundle_mediaserver.config.user }}/.bash_media"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: "{{ bundle_mediaserver.config.group }}"
  - src: "{{ role_path }}/files/2mp4"
    dest: "/usr/local/bin/2mp4"
    owner: "{{ bundle_mediaserver.config.user }}"
    group: root
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true

- name: add crontab entry
  cron:
    name: "backup mediaserver configs and databases"
    minute: "30"
    hour: "05"
    weekday: "*"
    job: "/bin/bash /usr/local/bin/mediabackup.sh"
    #user: "admin"
    disabled: "no"
  become_user: "{{ bundle_mediaserver.config.user }}"

- name: allow plexmediaserver on ufw
  ufw:
    rule: allow
    name: plexmediaserver
  with_items:
  - plexmediaserver
  - "WWW Full"
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true
  notify: restart ufw

- name: start and enable mediaserver services
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
  - plexcrypt
  - plexcrypthttp
  - plexmediaserver
  - tautulli
  - sonarr
  - caddy
  when:
  - bundle_mediaserver.enabled|default(false)|bool == true
